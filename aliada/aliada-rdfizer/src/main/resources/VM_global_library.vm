#macro (ontologyTypeURI $s $p $term)
	#set ($uri = $function.getOntologyTypeURI($cid,$term))
	#if($uri)
		$s $p <$uri> . 
	#end	
#end
## Generates ALIADA resource prefix
#macro (prefix)${configuration.namespace}#end	

#macro (value $expression)$xpath.val($expression,$root)#end

## Creates a new URI with an auto-increment local identifier.
#macro (new_uri $kind)<#prefix$kind/#newId>#end
 
## Creates a new URI with the given literal as local name. Normalization applies.
#macro (uri $kind $literal)<#prefix$kind/$function.normalize(${literal})>#end

## Creates a new URI with the given literal as local name. Strong normalization applies.
#macro (uri_with_strong_normalization $kind $literal)<#prefix$kind/$function.normalizeStrong(${literal})>#end

## Creates a URI with an ending fragment (the literal argument). Makes no normalization on that value. 
#macro (uri_with_fragment $kind $literal)<#prefix$kind/$function.uuid($literal)>#end

## Creates a new (monotonically incremented) id
#macro (newId)$function.id#end

## NAMESPACES SHORTCUTS
#macro (aliada $literal)<${configuration.aliadaOntologyNamespace}id/resource/Concept/$function.normalizeWithoutLowercase($literal)>#end
#macro (aliadaconcept $suffix)<${configuration.aliadaOntologyNamespace}id/resource/Concept/$suffix>#end
#macro (owl $v)<http://www.w3.org/2002/07/owl#$v>#end
#macro (rdf $v)<http://www.w3.org/1999/02/22-rdf-syntax-ns#$v>#end
#macro (rdfs $v)<http://www.w3.org/2000/01/rdf-schema#$v>#end
#macro (ecrm $v)<http://erlangen-crm.org/current/$v>#end
#macro (wgs $v)<http://www.w3.org/2003/01/geo/wgs84_pos#$v>#end
#macro (skos $v)<http://www.w3.org/2004/02/skos/core#$v>#end
#macro (efrbroo $v)<http://erlangen-crm.org/efrbroo/$v>#end 
#macro (aliada_p3 $v)<aliada:PX_$v>#end
## LIDO MACROS
#macro(legalBody $legalBody $owner_s $owner_p)
    #if($legalBody)
		#set($actor = "")
        ## LEGAL BODY NAME BEGIN
        #set($repositoryNames = $xpath.many("legalBodyName/appellationValue",$legalBody))
		#foreach($repositoryName in $repositoryNames)
    		#set($value = $function.escape($repositoryName.textContent))
			#if($value)
				#set($lang = $xpath.value("@lang", $repositoryName))
	        	#set($repository_appellation = "#uri('E82_Actor_Appellation' $value)")
	        	$repository_appellation $is_a #ecrm("E82_Actor_Appellation") .
	         	#if($lang && $lang.trim().length() > 0)
		        	$repository_appellation $P3_has_note "$value"@$lang .
		        #else
		        	$repository_appellation $P3_has_note "$value" .
	        	#end
	        	#if($actor == "")
	        		#set($actor = "#uri('E39_Actor' $value)")
	        		$actor $is_a #ecrm("E39_Actor") .
		        	$owner_s $owner_p $actor .
	        	#end
	        	$actor #ecrm("P131_is_identified_by") $repository_appellation .
	        #end	
			#set($lang = $xpath.value("@lang", $repositoryName))
        	#set($repository_appellation = "#uri('E82_Actor_Appellation' $value)")
        	$repository_appellation $is_a #ecrm("E82_Actor_Appellation") .
	        #if($lang && $lang.trim().length() > 0)
	        	$repository_appellation $P3_has_note "$value"@$lang .
	        #else
	        	$repository_appellation $P3_has_note "$value" .
        	#end
        	#if($actor == "")
        		#set($actor = "#uri('E39_Actor' $value)")
        		$actor $is_a #ecrm("E39_Actor") .
	        	$owner_s $owner_p $actor .
        	#end
        	$actor #ecrm("P131_is_identified_by") $repository_appellation .
        #end		
        ## LEGAL BODY NAME END
    	## LEGAL BODY WEBLINK BEGIN
        #set($weblink = $xpath.one("legalBodyWeblink",$legalBody))
        #if($weblink)
    		#set($value = $function.escape($weblink.textContent))
            #set($web_resource_s = "#aliadaconcept('web_resource')")
            #set($conceptual_appellation_s = "#uri_with_fragment('E75_Conceptual_Object_Appellation' $value)")
            #set($information_object_s = "#uri('E73_Information_Object' $value)")
            $conceptual_appellation_s $is_a #ecrm("E75_Conceptual_Object_Appellation") .
            $conceptual_appellation_s $P3_has_note "$function.escape($weblink.textContent)" .
            $information_object_s $is_a #ecrm("E73_Information_Object") .
            $information_object_s $P2_has_type $web_resource_s . 
            $information_object_s #ecrm("P149_is_identified_by") $conceptual_appellation_s . 
        	#if($actor != "")
				$actor #ecrm("P129i_is_subject_of") $information_object_s .
        	#end
        #end			
        ## LEGAL BODY WEBLINK END
    	## LEGAL BODY ID BEGIN
		#set($body_identifiers = $xpath.many("legalBodyID[@type='local']", $legalBody))
		#foreach($body_identifier in $body_identifiers)
			#set($value = $function.escape($body_identifier.textContent))
			#set($id_s = "#uri('E42_Identifier' $value)")
			$id_s $is_a #ecrm('E42_Identifier') .
			$id_s $P3_has_note "$value" . 
			$id_s $P2_has_type #aliada('LocalIdentifier') .
        	#if($actor != "")
				$actor #ecrm('P48_has_preferred_identifier') $id_s .
        	#end
		#end	
    	## LEGAL BODY ID END
    #end	
#end	

#macro(simplest_mapping_with_no_repeatable_tag $s $tag $subfield $record $type $kind $predicate $concept) 
	#set($tagValue = $xpath.df($tag,$subfield,$record))
	#if($tagValue) 
		#set($text = $function.escape($tagValue.textContent))
    	#set($s1 = "#uri_with_strong_normalization(${type} ${text})")
			$s1 $is_a $kind . 
    	#if($concept) 
			$s1 $P2_has_type $concept .
		#end
    	$s1 $P3_has_note "$text" . 
    	$s $predicate $s1 . 
	#end	
#end	

#macro(simplest_mapping_with_repeatable_tag $s $tag $subfield $record $type $kind $predicate $concept) 
	#set($tagValues = $xpath.dfs($tag,$subfield,$record))
	#foreach($tagValue in $tagValues) 
		#if($tagValue) 
    		#set($text = $function.escape($tagValue.textContent))
        	#set($s1 = "#uri_with_strong_normalization(${type} ${text})")
        	$s1 $is_a $kind . 
        	#if($concept) 
    			$s1 $P2_has_type $concept .
    		#end			
        	$s1 $P3_has_note "$text" . 
        	$s $predicate $s1 . 
		#end	
	#end	
#end	

#macro(simplest_mapping_of_string $s $tagValue $type $kind $predicate $concept) 
	#if($tagValue) 
		#set($text = $tagValue)
    	#set($s1 = "#uri_with_strong_normalization(${type} ${text})")
			$s1 $is_a $kind . 
    	#if($concept) 
			$s1 $P2_has_type $concept .
		#end
    	$s1 $P3_has_note "$text" . 
    	$s $predicate $s1 . 
	#end	
#end	

#macro(birth_or_death_date $tag $subfield $record $object_rel_date $object_rel_string_date $predicate $entity $mustUseBirth) 
	#set($tagValue = $xpath.df($tag,$subfield,$record))
	#if($tagValue)
		#set($dateValue = $function.splitDateAndPartialGet($tagValue.textContent,$mustUseBirth))
		#set($date_uri = "#uri('E50_Date' $dateValue)")
		#set($E52_Time_Span = "#ecrm('E52_Time-Span')")
		#set ($ts_uri = "#new_uri('E52_Time-Span')")
		#set ($bh_uri = "#new_uri($object_rel_string_date)")
		#set($P78_is_identified_by = "#ecrm('P78_is_identified_by')")
		#set($P4_has_time_span = "#ecrm('P4_has_time-span')")
		$date_uri $is_a #ecrm('E50_Date') .
		$date_uri $P3_has_note "$dateValue" .
		$bh_uri $P4_has_time_span $ts_uri .
		$ts_uri $P78_is_identified_by $date_uri .
		$ts_uri $is_a $E52_Time_Span .
		$bh_uri $is_a $object_rel_date .
		$entity $predicate $bh_uri . 
	#end	
#end	

## Create correlate triples for Generic Entity (that has) P4 has time-span E52 Time-Span P78 is identified by E50 Date between a Generic Entity($entity) with a generic predicate($property)
#macro(defined_mapping_with_no_repeatable_tag_to_date_relation $tag $subfield $record $object_rel_date $object_rel_string_date $predicate $entity) 
	#set($tagValue = $xpath.df($tag,$subfield,$record))
	#if($tagValue) 
		#set($date_uri = "#uri('E50_Date' $function.escape($tagValue.textContent))")
		#set($E52_Time_Span = "#ecrm('E52_Time-Span')")
		#set ($ts_uri = "#new_uri('E52_Time-Span')")
		#set ($bh_uri = "#new_uri($object_rel_string_date)")
		#set($P78_is_identified_by = "#ecrm('P78_is_identified_by')")
		#set($P4_has_time_span = "#ecrm('P4_has_time-span')")
		$date_uri $is_a #ecrm('E50_Date') .
		$date_uri $P3_has_note "$function.escape($tagValue.textContent)" .
		$bh_uri $P4_has_time_span $ts_uri .
		$ts_uri $P78_is_identified_by $date_uri .
		$ts_uri $is_a $E52_Time_Span .
		$bh_uri $is_a $object_rel_date .
		$entity $predicate $bh_uri . 
	#end	
#end	

## Create correlate triples for Generic Entity (that has) P4 has time-span E52 Time-Span P78 is identified by E50 Date between a Generic Entity($entity) with a generic predicate($property)
#macro(defined_mapping_with_repeatable_tag_to_date_relation $tag $subfield $record $object_rel_date $object_rel_string_date $predicate $entity) 
	#set($tagValues = $xpath.dfs($tag,$subfield,$record))
   #foreach($tagValue in $tagValues) 
	#if($tagValue) 
		#set($date_uri = "#uri('E50_Date' $function.escape($tagValue.textContent))")
		#set($E52_Time_Span = "#ecrm('E52_Time-Span')")
		#set ($ts_uri = "#new_uri('E52_Time-Span')")
		#set ($bh_uri = "#new_uri($object_rel_string_date)")
		#set($P78_is_identified_by = "#ecrm('P78_is_identified_by')")
		#set($P4_has_time_span = "#ecrm('P4_has_time-span')")
		$date_uri $is_a #ecrm('E50_Date') .
		$date_uri $P3_has_note "$function.escape($tagValue.textContent)" .
		$bh_uri $P4_has_time_span $ts_uri .
		$ts_uri $P78_is_identified_by $date_uri .
		$ts_uri $is_a $E52_Time_Span .
		$bh_uri $is_a $object_rel_date .
		$entity $predicate $bh_uri .
	#end	
   #end
#end

##F1 Work P1 is identified by F50 Controlled Access Point R8 consists of E90 Symbolic Object (4)
#macro(mapping_with_not_repeatable_tag_three_entities $tagValue $entityFirst $entity1 $entity2 $typeUri1 $typeUri2 $predicateFirst $predicate1)
  #if($tagValue) 	
  #if($tagValue.textContent)
	#set($value = "#uri($entity2 $function.escape($tagValue.textContent))")
	#set($ent1 = "#new_uri($entity1)")
	$ent1 $is_a  $typeUri1 .
	$value $is_a $typeUri2 .
	$value $P3_has_note "$function.escape($tagValue.textContent)" .
	$ent1 $predicate1 $value .
	$entityFirst $predicateFirst $ent1 .
  #end
 #end
#end

##F1 Work P129 is about E27 Site3 is located in or within E53 Place P87 is identified by E47 Spatial Coordinates
#macro(mapping_with_not_repeatable_tag_four_entities $tagValue $entityFirst $entity1 $entity2 $entity3 $typeUri1 $typeUri2 $typeUri3 $predicateFirst $predicate1 $predicate2)
  #if($tagValue) 	
   #if($tagValue.textContent)
	#set($value = "#uri($entity3 $function.escape($tagValue.textContent))")
	#set($ent2 = "#new_uri($entity2)")
	#set($ent1 = "#new_uri($entity1)")
	$ent2 $is_a $typeUri2 .
	$ent1 $is_a  $typeUri1 .
	$value $is_a $typeUri3 .
	$value $P3_has_note "$function.escape($tagValue.textContent)" .
	$ent1 $predicate1 $ent2 .
	$ent2 $predicate2 $value .
	$entityFirst $predicateFirst $ent1 .
  #end
 #end
#end


##F1 Work P1 is identified by F50 Controlled Access Point R8 consists of E90 Symbolic Object (4)
#macro(mapping_with_repeatable_tag_three_entities $tagValues $entityFirst $entity1 $entity2 $typeUri1 $typeUri2 $predicateFirst $predicate1)
  #if($tagValues) 	
   #foreach($tagValue in $tagValues) 
    #if($tagValue.textContent)
		#set($value = "#uri($entity2 $function.escape($tagValue.textContent))")
		#set($ent1 = "#new_uri($entity1)")
		$ent1 $is_a  $typeUri1 .
		$value $is_a $typeUri2 .
		$value $P3_has_note "$function.escape($tagValue.textContent)" .
		$ent1 $predicate1 $value .
		$entityFirst $predicateFirst $ent1 .
	#end  
  #end
 #end
#end

##F1 Work P129 is about E27 Site3 is located in or within E53 Place P87 is identified by E47 Spatial Coordinates
#macro(mapping_with_repeatable_tag_four_entities $tagValues $entityFirst $entity1 $entity2 $entity3 $typeUri1 $typeUri2 $typeUri3 $predicateFirst $predicate1 $predicate2)
  #if($tagValues) 	
   #foreach($tagValue in $tagValues) 
     #if($tagValue.textContent)
		#set($value = "#uri($entity3 $function.escape($tagValue.textContent))")
		#set($ent2 = "#new_uri($entity2)")
		#set($ent1 = "#new_uri($entity1)")
		$ent2 $is_a $typeUri2 .
		$ent1 $is_a  $typeUri1 .
		$value $is_a $typeUri3 .
		$value $P3_has_note "$function.escape($tagValue.textContent)" .
		$ent1 $predicate1 $ent2 .
		$ent2 $predicate2 $value .
		$entityFirst $predicateFirst $ent1 .
    #end
  #end
 #end
#end

#macro (wk_exp_ner $tag $code $record $subject)
	#foreach($entry in $function.mner($tag,$code,$record).entrySet()) 
		#set($ne_s = "#uri_with_fragment('Concept' $entry.getKey())")
		#set($coll_s = "#uri_with_fragment('Collection' $entry.getValue())")
		$ne_s $is_a $Concept . 
		$ne_s #skos('prefLabel') "$function.escape($entry.getKey())" . 
		$coll_s #skos('member') $ne_s .
		$subject #ecrm('P129_is_about') $ne_s .		
	#end
#end

#macro (mn_it_lido_ner $nodelist $subject)
	#foreach($node in $nodelist)
		#set($map = $function.ner($node.textContent))
		#foreach($entry in $map.entrySet()) 
			#set($ne_s = "#uri_with_fragment('Concept' $entry.getKey())")
			#set($coll_s = "#uri_with_fragment('Collection' $entry.getValue())")
			$ne_s $is_a $Concept . 
			$ne_s #skos('prefLabel') "$function.escape($entry.getKey())" . 
			$coll_s #skos('member') $ne_s .
			$main_subject #ecrm('P137_exemplifies') $ne_s .
		#end
	#end	
#end



#macro(mapping_aliada_p3_has_note_with_repeatable_tag $s $tag $subfield $record $type) 
	#set($tagValues = $xpath.dfs($tag,$subfield,$record))
	#foreach($tagValue in $tagValues) 
		#if($tagValue) 
    		#set($text = $function.escape($tagValue.textContent))
			$s $type "$text" .
		#end	
	#end	
#end	

#macro(mapping_aliada_p3_has_note_with_no_repeatable_tag $s $tag $subfield $record $type) 
	#set($tagValue = $xpath.df($tag,$subfield,$record))
		#if($tagValue) 
    		#set($text = $function.escape($tagValue.textContent))
			$s $type "$text" .
		#end	
#end	

##F2 Expression (instantiated as E36 Visual Item P2 has type E55 Type {Cartographic image}) P138 represents {P138.1 has type E55 Type = "Scale"} E1 CRM Entity
#macro(mapping_aliada_instanced_with_repeatable_tag $s $tag $subfield $record $entity1 $entity2 $typeUri1 $typeUri2 $concept $predicate) 
	#set($tagValues = $xpath.dfs($tag,$subfield,$record))
	#foreach($tagValue in $tagValues) 
		#if($tagValue) 
    		#set($text = $function.escape($tagValue.textContent))
			#set($ent2 = "#new_uri($entity2)")
			#set($ent1 = "#new_uri($entity1)")
			$ent2 $is_a $typeUri2 .
			$ent1 $is_a  $typeUri1 .
			$s $is_a $ent1 .
			$s $P2_has_type $concept .
			$s $predicate "$text" .
		#end	
	#end	
#end	

##F2 Expression (instantiated as E36 Visual Item P2 has type E55 Type {Cartographic image}) P138 represents {P138.1 has type E55 Type = "Scale"} E1 CRM Entity
#macro(mapping_aliada_instanced_with_no_repeatable_tag $s $tag $subfield $record $entity1 $entity2 $typeUri1 $typeUri2 $concept $predicate) 
	#set($tagValue = $xpath.df($tag,$subfield,$record))
		#if($tagValue) 
    		#set($text = $function.escape($tagValue.textContent))
			#set($ent2 = "#new_uri($entity2)")
			#set($ent1 = "#new_uri($entity1)")
			$ent2 $is_a $typeUri2 .
			$ent1 $is_a  $typeUri1 .
			$s $is_a  $ent1 .
			$s $P2_has_type $concept .
			$s $predicate "$text" .
		#end	
#end	


##F22 Self-Contained Expression R3i realises F18 Serial work P3 has note {P3.1 has type E55 Type = “Expected frequency”} E62 String
#macro(mapping_aliada_self_contained_with_repeatable_tag $s $tag $subfield $record $entity1 $entity2 $typeUri1 $typeUri2 $typeUri3 $predicate) 
	#set($tagValues = $xpath.dfs($tag,$subfield,$record))
	#foreach($tagValue in $tagValues) 
		#if($tagValue) 
    		#set($text = $function.escape($tagValue.textContent))
			#set($ent1 = "#new_uri($entity1)")
			$s $is_a $typeUri1 .
			$s $typeUri3 $ent1 . 
			$ent1 $is_a $typeUri2 .
			$ent1 $predicate "$text" .
		#end	
	#end	
#end

##F22 Self-Contained Expression R3i realises F18 Serial work P3 has note {P3.1 has type E55 Type = “Expected frequency”} E62 String
#macro(mapping_aliada_self_contained_to_control_field_tag $s $tagValue $entity1 $entity2 $typeUri1 $typeUri2 $typeUri3 $predicate) 
		#if($tagValue) 
    		#set($text = $function.escape($tagValue.textContent))
			#set($ent1 = "#new_uri($entity1)")
			$s $is_a $typeUri1 .
			$s $typeUri3 $ent1 .
 			$ent1 $is_a $typeUri2 .
			$ent1 $predicate "$text" .
		#end	
#end

##F22 Self-Contained Expression R3i realises F18 Serial work P3 has note {P3.1 has type E55 Type = “Expected frequency”} E62 String
#macro(mapping_aliada_self_contained_with_no_repeatable_tag $s $tag $subfield $record $entity1 $entity2 $typeUri1 $typeUri2 $typeUri3 $predicate) 
	#set($tagValue = $xpath.df($tag,$subfield,$record))
		#if($tagValue) 
    		#set($text = $function.escape($tagValue.textContent))
			#set($ent1 = "#new_uri($entity1)")
			$s $is_a $typeUri1 .
			$s $typeUri3 $ent1 .
 			$ent1 $is_a $typeUri2 .
			$ent1 $predicate "$text" .
		#end	
#end



##F24 Expression R5 has component F2 Expression {P2 has type E55 Type = "Summary"} .
#macro(mapping_aliada_has_component_with_repeatable_tag $s $tag $subfield $record $entity1 $typeUri1 $typeUri2 $predicate $concept) 
	#set($tagValues = $xpath.dfs($tag,$subfield,$record))
	#foreach($tagValue in $tagValues) 
		#if($tagValue) 
    		#set($text = $function.escape($tagValue.textContent))
			#set($ent1 = "#new_uri($entity1)")
			$s $predicate $typeUri1 .
			$ent1 $is_a $typeUri2 .	
			$ent1 $P2_has_type $concept .
			$ent1 $P3_has_note "$text" . 
		#end	
	#end	
#end


##F1 Work R16B was initiated by F27 Work Conception P16 used specific object {P16.1 mode of use: E55 Type = "supplemented work"} F1 Work
#macro(mapping_aliada_was_initiated_with_repeatable_tag $s $tag $subfield $record $entity1 $typeUri1 $typeUri2 $predicate1 $predicate2) 
	#set($tagValues = $xpath.dfs($tag,$subfield,$record))
	#foreach($tagValue in $tagValues) 
		#if($tagValue) 
    		#set($text = $function.escape($tagValue.textContent))
			#set($ent1 = "#new_uri($entity1)")
			$s $predicate1 $ent1 .
			$ent1 $is_a $typeUri1 .
			$ent1 $predicate2 "$text" .
		#end	
	#end	
#end