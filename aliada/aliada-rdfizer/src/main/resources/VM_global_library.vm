#macro (ontologyTypeURI $s $p $term)
	#set ($uri = $function.getOntologyTypeURI($cid,$term))
	#if($uri)
		$s $p <$uri> . 
	#end	
#end
## Generates ALIADA resource prefix
#macro (prefix)${configuration.namespace}id/resource#end	

#macro (value $expression)$xpath.val($expression,$root)#end

## Creates a new URI with an auto-increment local identifier.
#macro (new_uri $kind)<#prefix/$kind/#newId>#end
 
## Creates a new URI with the given literal as local name. Normalization applies.
#macro (uri $kind $literal)<#prefix/$kind/$function.normalize(${literal})>#end

## Creates a new URI with the given literal as local name. Strong normalization applies.
#macro (uri_with_strong_normalization $kind $literal)<#prefix/$kind/$function.normalizeStrong(${literal})>#end

## Creates a URI with an ending fragment (the literal argument). Makes no normalization on that value. 
#macro (uri_with_fragment $kind $literal)<#prefix/$kind/$function.uuid($literal)>#end

## Creates a new (monotonically incremented) id
#macro (newId)$function.id#end

## NAMESPACES SHORTCUTS
#macro (aliada $literal)<${configuration.aliadaOntologyNamespace}id/resource/Concept/$function.normalizeWithoutLowercase($literal)>#end
#macro (aliadaconcept $suffix)<${configuration.aliadaOntologyNamespace}id/resource/Concept/$suffix>#end
#macro (owl $v)<http://www.w3.org/2002/07/owl#$v>#end
#macro (rdf $v)<http://www.w3.org/1999/02/22-rdf-syntax-ns#$v>#end
#macro (rdfs $v)<http://www.w3.org/2000/01/rdf-schema#$v>#end
#macro (ecrm $v)<http://erlangen-crm.org/current/$v>#end
#macro (wgs $v)<http://www.w3.org/2003/01/geo/wgs84_pos#$v>#end
#macro (skos $v)<http://www.w3.org/2004/02/skos/core#$v>#end
#macro (efrbroo $v)<http://erlangen-crm.org/efrbroo/$v>#end 
## LIDO MACROS
#macro(legalBody $legalBody $owner_s $owner_p)
    #if($legalBody)
		#set($actor = "")
        ## LEGAL BODY NAME BEGIN
        #set($repositoryNames = $xpath.many("legalBodyName/appellationValue",$legalBody))
		#foreach($repositoryName in $repositoryNames)
    		#set($value = $repositoryName.textContent)
			#set($lang = $xpath.one("@lang", $repositoryName))
        	#set($repository_appellation = "#uri('E82_Actor_Appellation' $value)")
        	$repository_appellation $is_a #ecrm("E82_Actor_Appellation") .
         	#if($lang)
	        	$repository_appellation $P3_has_note "$value"@$lang.textContent .
	        #else
	        	$repository_appellation $P3_has_note "$value" .
        	#end
        	#if(!$actor || $actor == "")
        		#set($actor = "#uri('E39_Actor' $value)")
        		$actor $is_a #ecrm("E39_Actor") .
	        	$owner_s $owner_p $actor .
        	#end
        	$actor #ecrm("P131_is_identified_by") $repository_appellation .
        #end		
        ## LEGAL BODY NAME END
    	## LEGAL BODY WEBLINK BEGIN
        #set($weblink = $xpath.one("legalBodyWeblink",$legalBody))
        #if($weblink)
    		#set($value = $weblink.textContent)
            #set($web_resource_s = "#aliadaconcept('web_resource')")
            #set($conceptual_appellation_s = "#uri_with_fragment('E75_Conceptual_Object_Appellation' $value)")
            #set($information_object_s = "#uri('E73_Information_Object' $value)")
            $conceptual_appellation_s $is_a #ecrm("E75_Conceptual_Object_Appellation") .
            $conceptual_appellation_s $P3_has_note "$weblink.textContent" .
            $information_object_s $is_a #ecrm("E73_Information_Object") .
            $information_object_s $P2_has_type $web_resource_s . 
            $information_object_s #ecrm("P149_is_identified_by") $conceptual_appellation_s . 
        	#if($actor)
        		$actor #ecrm("P129i_is_subject_of") $information_object_s .
        	#end
        #end			
        ## LEGAL BODY WEBLINK END
    	## LEGAL BODY ID BEGIN
		#set($body_identifiers = $xpath.many("legalBodyID[@type='local']", $legalBody))
		#foreach($body_identifier in $body_identifiers)
			#set($value = $body_identifier.textContent)
			#set($id_s = "#uri('E42_Identifier' $value)")
			$id_s $is_a #ecrm('E42_Identifier') .
			$id_s $P3_has_note "$value" . 
			$id_s $P2_has_type #aliada('LocalIdentifier') .
        	#if($actor)
				$actor #ecrm('P48_has_preferred_identifier') $id_s .
        	#end
		#end	
    	## LEGAL BODY ID END
    #end	
#end	

#macro(simplest_mapping_with_no_repeatable_tag $s $tag $subfield $record $type $kind $predicate $concept) 
	#set($tagValue = $xpath.df($tag,$subfield,$record))
	#if($tagValue) 
		#set($text = $tagValue.textContent)
    	#set($s1 = "#uri_with_strong_normalization(${type} ${text})")
			$s1 $is_a $kind . 
    	#if($concept) 
			$s1 $P2_has_type $concept .
		#end
    	$s1 $P3_has_note "$text" . 
    	$s $predicate $s1 . 
	#end	
#end	

#macro(simplest_mapping_with_repeatable_tag $s $tag $subfield $record $type $kind $predicate $concept) 
	#set($tagValues = $xpath.dfs($tag,$subfield,$record))
	#foreach($tagValue in $tagValues) 
		#if($tagValue) 
    		#set($text = $tagValue.textContent)
        	#set($s1 = "#uri_with_strong_normalization(${type} ${text})")
        	$s1 $is_a $kind . 
        	#if($concept) 
    			$s1 $P2_has_type $concept .
    		#end			
        	$s1 $P3_has_note "$text" . 
        	$s $predicate $s1 . 
		#end	
	#end	
#end

#macro (ner $tag $code $record $subject)
	
#end	